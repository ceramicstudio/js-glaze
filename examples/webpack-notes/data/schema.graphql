type Query {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
  account(id: DID!): CeramicAccount!
  viewer: CeramicAccount
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

type CeramicAccount {
  id: DID!
  isViewer: Boolean!
  data: CeramicAccountData!
}

"""
A field whose value conforms to the standard DID format as specified in did-core: https://www.w3.org/TR/did-core/.
"""
scalar DID @specifiedBy(url: "https://www.w3.org/TR/did-core/")

type CeramicAccountData {
  profile: Profile
  noteCollection(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
  ): NoteConnection
}

type Profile implements Node {
  id: ID!
  name: String!
}

"""A connection to a list of items."""
type NoteConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [NoteEdge]
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

"""An edge in a connection."""
type NoteEdge {
  """The item at the end of the edge"""
  node: Note

  """A cursor for use in pagination"""
  cursor: String!
}

type Note implements Node {
  id: ID!
  text: String!
  title: String!
  author: CeramicAccount!
  version: CeramicCommitID!
}

"""A Ceramic Commit ID"""
scalar CeramicCommitID

type Mutation {
  createProfile(input: CreateProfileInput!): CreateProfilePayload
  updateProfile(input: UpdateProfileInput!): UpdateProfilePayload
  createNote(input: CreateNoteInput!): CreateNotePayload
  updateNote(input: UpdateNoteInput!): UpdateNotePayload
}

type CreateProfilePayload {
  node: Profile!
  clientMutationId: String
}

input CreateProfileInput {
  content: RequiredProfileInput!
  clientMutationId: String
}

input RequiredProfileInput {
  name: String!
}

type UpdateProfilePayload {
  node: Profile!
  clientMutationId: String
}

input UpdateProfileInput {
  id: ID!
  content: ProfileInput!
  options: UpdateOptionsInput
  clientMutationId: String
}

input ProfileInput {
  name: String
}

input UpdateOptionsInput {
  replace: Boolean
  version: CeramicCommitID
}

type CreateNotePayload {
  node: Note!
  clientMutationId: String
}

input CreateNoteInput {
  content: RequiredNoteInput!
  clientMutationId: String
}

input RequiredNoteInput {
  text: String!
  title: String!
}

type UpdateNotePayload {
  node: Note!
  clientMutationId: String
}

input UpdateNoteInput {
  id: ID!
  content: NoteInput!
  options: UpdateOptionsInput
  clientMutationId: String
}

input NoteInput {
  text: String
  title: String
}