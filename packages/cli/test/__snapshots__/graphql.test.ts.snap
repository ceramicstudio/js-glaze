// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`graphql graphql:schema printing graphql schema succeeds 1`] = `
"type Query {
  \\"\\"\\"Fetches an object given its ID\\"\\"\\"
  node(
    \\"\\"\\"The ID of an object\\"\\"\\"
    id: ID!
  ): Node
  account(id: DID!): CeramicAccount!
  viewer: CeramicAccount
}

\\"\\"\\"An object with an ID\\"\\"\\"
interface Node {
  \\"\\"\\"The id of the object.\\"\\"\\"
  id: ID!
}

type CeramicAccount {
  id: DID!
  isViewer: Boolean!
  data: CeramicAccountData!
}

\\"\\"\\"
A field whose value conforms to the standard DID format as specified in did-core: https://www.w3.org/TR/did-core/.
\\"\\"\\"
scalar DID @specifiedBy(url: \\"https://www.w3.org/TR/did-core/\\")

type CeramicAccountData {
  pictureCollection(
    \\"\\"\\"Returns the items in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"Returns the first n items from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the items in the list that come before the specified cursor.\\"\\"\\"
    before: String

    \\"\\"\\"Returns the last n items from the list.\\"\\"\\"
    last: Int
  ): Picture
  postCollection(
    \\"\\"\\"Returns the items in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"Returns the first n items from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the items in the list that come before the specified cursor.\\"\\"\\"
    before: String

    \\"\\"\\"Returns the last n items from the list.\\"\\"\\"
    last: Int
  ): Post
}

type Picture implements Node {
  id: ID!
  url: String!
}

type Post implements Node {
  id: ID!
  text: String!
}

type Mutation {
  createPicture(input: CreatePictureInput!): CreatePicturePayload
  updatePicture(input: UpdatePictureInput!): UpdatePicturePayload
  createPost(input: CreatePostInput!): CreatePostPayload
  updatePost(input: UpdatePostInput!): UpdatePostPayload
}

type CreatePicturePayload {
  node: Picture!
  clientMutationId: String
}

input CreatePictureInput {
  content: PictureInput!
  clientMutationId: String
}

input PictureInput {
  url: String!
}

type UpdatePicturePayload {
  node: Picture!
  clientMutationId: String
}

input UpdatePictureInput {
  id: ID!
  content: PictureInput!
  clientMutationId: String
}

type CreatePostPayload {
  node: Post!
  clientMutationId: String
}

input CreatePostInput {
  content: PostInput!
  clientMutationId: String
}

input PostInput {
  text: String!
}

type UpdatePostPayload {
  node: Post!
  clientMutationId: String
}

input UpdatePostInput {
  id: ID!
  content: PostInput!
  clientMutationId: String
}"
`;

exports[`graphql graphql:schema printing graphql schema succeeds with --readonly flag 1`] = `
"type Query {
  \\"\\"\\"Fetches an object given its ID\\"\\"\\"
  node(
    \\"\\"\\"The ID of an object\\"\\"\\"
    id: ID!
  ): Node
  account(id: DID!): CeramicAccount!
  viewer: CeramicAccount
}

\\"\\"\\"An object with an ID\\"\\"\\"
interface Node {
  \\"\\"\\"The id of the object.\\"\\"\\"
  id: ID!
}

type CeramicAccount {
  id: DID!
  isViewer: Boolean!
  data: CeramicAccountData!
}

\\"\\"\\"
A field whose value conforms to the standard DID format as specified in did-core: https://www.w3.org/TR/did-core/.
\\"\\"\\"
scalar DID @specifiedBy(url: \\"https://www.w3.org/TR/did-core/\\")

type CeramicAccountData {
  pictureCollection(
    \\"\\"\\"Returns the items in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"Returns the first n items from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the items in the list that come before the specified cursor.\\"\\"\\"
    before: String

    \\"\\"\\"Returns the last n items from the list.\\"\\"\\"
    last: Int
  ): Picture
  postCollection(
    \\"\\"\\"Returns the items in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"Returns the first n items from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the items in the list that come before the specified cursor.\\"\\"\\"
    before: String

    \\"\\"\\"Returns the last n items from the list.\\"\\"\\"
    last: Int
  ): Post
}

type Picture implements Node {
  id: ID!
  url: String!
}

type Post implements Node {
  id: ID!
  text: String!
}"
`;
