// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`graphql graphql:schema printing graphql schema succeeds 1`] = `
"type Query {
  \\"\\"\\"Fetches an object given its ID\\"\\"\\"
  node(
    \\"\\"\\"The ID of an object\\"\\"\\"
    id: ID!
  ): Node
  viewer: CeramicAccount
  pictureIndex(
    \\"\\"\\"Returns the items in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"Returns the first n items from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the items in the list that come before the specified cursor.\\"\\"\\"
    before: String

    \\"\\"\\"Returns the last n items from the list.\\"\\"\\"
    last: Int
  ): PictureConnection
  postIndex(
    \\"\\"\\"Returns the items in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"Returns the first n items from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the items in the list that come before the specified cursor.\\"\\"\\"
    before: String

    \\"\\"\\"Returns the last n items from the list.\\"\\"\\"
    last: Int
  ): PostConnection
}

\\"\\"\\"An object with an ID\\"\\"\\"
interface Node {
  \\"\\"\\"The id of the object.\\"\\"\\"
  id: ID!
}

type CeramicAccount implements Node {
  id: ID!
  isViewer: Boolean!
  pictureCollection(
    \\"\\"\\"Returns the items in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"Returns the first n items from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the items in the list that come before the specified cursor.\\"\\"\\"
    before: String

    \\"\\"\\"Returns the last n items from the list.\\"\\"\\"
    last: Int
  ): PictureConnection
  postCollection(
    \\"\\"\\"Returns the items in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"Returns the first n items from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the items in the list that come before the specified cursor.\\"\\"\\"
    before: String

    \\"\\"\\"Returns the last n items from the list.\\"\\"\\"
    last: Int
  ): PostConnection
}

\\"\\"\\"A connection to a list of items.\\"\\"\\"
type PictureConnection {
  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: PageInfo!

  \\"\\"\\"A list of edges.\\"\\"\\"
  edges: [PictureEdge]
}

\\"\\"\\"Information about pagination in a connection.\\"\\"\\"
type PageInfo {
  \\"\\"\\"When paginating forwards, are there more items?\\"\\"\\"
  hasNextPage: Boolean!

  \\"\\"\\"When paginating backwards, are there more items?\\"\\"\\"
  hasPreviousPage: Boolean!

  \\"\\"\\"When paginating backwards, the cursor to continue.\\"\\"\\"
  startCursor: String

  \\"\\"\\"When paginating forwards, the cursor to continue.\\"\\"\\"
  endCursor: String
}

\\"\\"\\"An edge in a connection.\\"\\"\\"
type PictureEdge {
  \\"\\"\\"The item at the end of the edge\\"\\"\\"
  node: Picture

  \\"\\"\\"A cursor for use in pagination\\"\\"\\"
  cursor: String!
}

type Picture implements Node {
  id: ID!
  url: String!
}

\\"\\"\\"A connection to a list of items.\\"\\"\\"
type PostConnection {
  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: PageInfo!

  \\"\\"\\"A list of edges.\\"\\"\\"
  edges: [PostEdge]
}

\\"\\"\\"An edge in a connection.\\"\\"\\"
type PostEdge {
  \\"\\"\\"The item at the end of the edge\\"\\"\\"
  node: Post

  \\"\\"\\"A cursor for use in pagination\\"\\"\\"
  cursor: String!
}

type Post implements Node {
  id: ID!
  text: String!
}

type Mutation {
  createPicture(input: CreatePictureInput!): CreatePicturePayload
  updatePicture(input: UpdatePictureInput!): UpdatePicturePayload
  createPost(input: CreatePostInput!): CreatePostPayload
  updatePost(input: UpdatePostInput!): UpdatePostPayload
}

type CreatePicturePayload {
  \\"\\"\\"Fetches an object given its ID\\"\\"\\"
  node(
    \\"\\"\\"The ID of an object\\"\\"\\"
    id: ID!
  ): Node
  viewer: CeramicAccount
  document: Picture!
  clientMutationId: String
}

input CreatePictureInput {
  content: RequiredPictureInput!
  clientMutationId: String
}

input RequiredPictureInput {
  url: String!
}

type UpdatePicturePayload {
  \\"\\"\\"Fetches an object given its ID\\"\\"\\"
  node(
    \\"\\"\\"The ID of an object\\"\\"\\"
    id: ID!
  ): Node
  viewer: CeramicAccount
  document: Picture!
  clientMutationId: String
}

input UpdatePictureInput {
  id: ID!
  content: PictureInput!
  options: UpdateOptionsInput
  clientMutationId: String
}

input PictureInput {
  url: String
}

input UpdateOptionsInput {
  replace: Boolean
  version: CeramicCommitID
}

\\"\\"\\"A Ceramic Commit ID\\"\\"\\"
scalar CeramicCommitID

type CreatePostPayload {
  \\"\\"\\"Fetches an object given its ID\\"\\"\\"
  node(
    \\"\\"\\"The ID of an object\\"\\"\\"
    id: ID!
  ): Node
  viewer: CeramicAccount
  document: Post!
  clientMutationId: String
}

input CreatePostInput {
  content: RequiredPostInput!
  clientMutationId: String
}

input RequiredPostInput {
  text: String!
}

type UpdatePostPayload {
  \\"\\"\\"Fetches an object given its ID\\"\\"\\"
  node(
    \\"\\"\\"The ID of an object\\"\\"\\"
    id: ID!
  ): Node
  viewer: CeramicAccount
  document: Post!
  clientMutationId: String
}

input UpdatePostInput {
  id: ID!
  content: PostInput!
  options: UpdateOptionsInput
  clientMutationId: String
}

input PostInput {
  text: String
}"
`;

exports[`graphql graphql:schema printing graphql schema succeeds with --readonly flag 1`] = `
"type Query {
  \\"\\"\\"Fetches an object given its ID\\"\\"\\"
  node(
    \\"\\"\\"The ID of an object\\"\\"\\"
    id: ID!
  ): Node
  viewer: CeramicAccount
  pictureIndex(
    \\"\\"\\"Returns the items in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"Returns the first n items from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the items in the list that come before the specified cursor.\\"\\"\\"
    before: String

    \\"\\"\\"Returns the last n items from the list.\\"\\"\\"
    last: Int
  ): PictureConnection
  postIndex(
    \\"\\"\\"Returns the items in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"Returns the first n items from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the items in the list that come before the specified cursor.\\"\\"\\"
    before: String

    \\"\\"\\"Returns the last n items from the list.\\"\\"\\"
    last: Int
  ): PostConnection
}

\\"\\"\\"An object with an ID\\"\\"\\"
interface Node {
  \\"\\"\\"The id of the object.\\"\\"\\"
  id: ID!
}

type CeramicAccount implements Node {
  id: ID!
  isViewer: Boolean!
  pictureCollection(
    \\"\\"\\"Returns the items in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"Returns the first n items from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the items in the list that come before the specified cursor.\\"\\"\\"
    before: String

    \\"\\"\\"Returns the last n items from the list.\\"\\"\\"
    last: Int
  ): PictureConnection
  postCollection(
    \\"\\"\\"Returns the items in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"Returns the first n items from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the items in the list that come before the specified cursor.\\"\\"\\"
    before: String

    \\"\\"\\"Returns the last n items from the list.\\"\\"\\"
    last: Int
  ): PostConnection
}

\\"\\"\\"A connection to a list of items.\\"\\"\\"
type PictureConnection {
  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: PageInfo!

  \\"\\"\\"A list of edges.\\"\\"\\"
  edges: [PictureEdge]
}

\\"\\"\\"Information about pagination in a connection.\\"\\"\\"
type PageInfo {
  \\"\\"\\"When paginating forwards, are there more items?\\"\\"\\"
  hasNextPage: Boolean!

  \\"\\"\\"When paginating backwards, are there more items?\\"\\"\\"
  hasPreviousPage: Boolean!

  \\"\\"\\"When paginating backwards, the cursor to continue.\\"\\"\\"
  startCursor: String

  \\"\\"\\"When paginating forwards, the cursor to continue.\\"\\"\\"
  endCursor: String
}

\\"\\"\\"An edge in a connection.\\"\\"\\"
type PictureEdge {
  \\"\\"\\"The item at the end of the edge\\"\\"\\"
  node: Picture

  \\"\\"\\"A cursor for use in pagination\\"\\"\\"
  cursor: String!
}

type Picture implements Node {
  id: ID!
  url: String!
}

\\"\\"\\"A connection to a list of items.\\"\\"\\"
type PostConnection {
  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: PageInfo!

  \\"\\"\\"A list of edges.\\"\\"\\"
  edges: [PostEdge]
}

\\"\\"\\"An edge in a connection.\\"\\"\\"
type PostEdge {
  \\"\\"\\"The item at the end of the edge\\"\\"\\"
  node: Post

  \\"\\"\\"A cursor for use in pagination\\"\\"\\"
  cursor: String!
}

type Post implements Node {
  id: ID!
  text: String!
}"
`;
