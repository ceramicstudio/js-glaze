// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`schema printGraphQLSchema() 1`] = `
"type Query {
  \\"\\"\\"Fetches an object given its ID\\"\\"\\"
  node(
    \\"\\"\\"The ID of an object\\"\\"\\"
    id: ID!
  ): Node
  account(id: ID!): CeramicAccount!
  viewer: CeramicAccount
}

\\"\\"\\"An object with an ID\\"\\"\\"
interface Node {
  \\"\\"\\"The id of the object.\\"\\"\\"
  id: ID!
}

type CeramicAccount {
  id: DID!
  isViewer: Boolean!
  store: DataStore!
}

\\"\\"\\"
A field whose value conforms to the standard DID format as specified in did-core: https://www.w3.org/TR/did-core/.
\\"\\"\\"
scalar DID @specifiedBy(url: \\"https://www.w3.org/TR/did-core/\\")

type DataStore {
  genericProfile: GenericProfile
  socialProfile: SocialProfile
  personProfile: PersonProfile
}

type GenericProfile implements Node {
  id: ID!
  name: String
  image: ImageSources
}

type ImageSources {
  original: ImageMetadata!
  alternatives: [ImageMetadata]
}

type ImageMetadata {
  src: String!
  mimeType: String!
  width: Int!
  height: Int!
  size: Int
}

type SocialProfile implements Node {
  id: ID!
  description: String
  emoji: String
  background: ImageSources
  url: String
}

type PersonProfile implements Node {
  id: ID!
  birthDate: String
  gender: String
  homeLocation: String
  residenceCountry: String
  nationalities: [String]
  affiliations: [String]
}

type Mutation {
  createGenericProfile(input: CreateGenericProfileInput!): CreateGenericProfilePayload
  updateGenericProfile(input: UpdateGenericProfileInput!): UpdateGenericProfilePayload
  createSocialProfile(input: CreateSocialProfileInput!): CreateSocialProfilePayload
  updateSocialProfile(input: UpdateSocialProfileInput!): UpdateSocialProfilePayload
  createPersonProfile(input: CreatePersonProfileInput!): CreatePersonProfilePayload
  updatePersonProfile(input: UpdatePersonProfileInput!): UpdatePersonProfilePayload
}

type CreateGenericProfilePayload {
  node: GenericProfile!
  clientMutationId: String
}

input CreateGenericProfileInput {
  content: GenericProfileInput!
  clientMutationId: String
}

input GenericProfileInput {
  name: String
  image: ImageSourcesInput
}

input ImageSourcesInput {
  original: ImageMetadataInput!
  alternatives: [ImageMetadataInput]
}

input ImageMetadataInput {
  src: String!
  mimeType: String!
  width: Int!
  height: Int!
  size: Int
}

type UpdateGenericProfilePayload {
  node: GenericProfile!
  clientMutationId: String
}

input UpdateGenericProfileInput {
  id: ID!
  content: GenericProfileInput!
  clientMutationId: String
}

type CreateSocialProfilePayload {
  node: SocialProfile!
  clientMutationId: String
}

input CreateSocialProfileInput {
  content: SocialProfileInput!
  clientMutationId: String
}

input SocialProfileInput {
  description: String
  emoji: String
  background: ImageSourcesInput
  url: String
}

type UpdateSocialProfilePayload {
  node: SocialProfile!
  clientMutationId: String
}

input UpdateSocialProfileInput {
  id: ID!
  content: SocialProfileInput!
  clientMutationId: String
}

type CreatePersonProfilePayload {
  node: PersonProfile!
  clientMutationId: String
}

input CreatePersonProfileInput {
  content: PersonProfileInput!
  clientMutationId: String
}

input PersonProfileInput {
  birthDate: String
  gender: String
  homeLocation: String
  residenceCountry: String
  nationalities: [String]
  affiliations: [String]
}

type UpdatePersonProfilePayload {
  node: PersonProfile!
  clientMutationId: String
}

input UpdatePersonProfileInput {
  id: ID!
  content: PersonProfileInput!
  clientMutationId: String
}"
`;
