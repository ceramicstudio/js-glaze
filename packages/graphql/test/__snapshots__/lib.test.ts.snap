// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`lib create a note 1`] = `
Object {
  "data": Object {
    "createNote": Object {
      "node": Object {
        "date": "2021-01-06T14:28:00.000Z",
        "text": "hello test!",
        "title": "test",
      },
    },
  },
}
`;

exports[`lib read existing note 1`] = `
Object {
  "data": Object {
    "node": Object {
      "date": "2020-12-10T11:12:34.567Z",
      "text": "An example note",
      "title": "Example",
    },
  },
}
`;

exports[`lib schema creation 1`] = `
"type Query {
  \\"\\"\\"Fetches an object given its ID\\"\\"\\"
  node(
    \\"\\"\\"The ID of an object\\"\\"\\"
    id: ID!
  ): Node
  account(id: ID!): DID!
  viewer: DID
  exampleNote: Note!
}

\\"\\"\\"An object with an ID\\"\\"\\"
interface Node {
  \\"\\"\\"The id of the object.\\"\\"\\"
  id: ID!
}

type DID {
  id: ID!
  isViewer: Boolean!
  store: DataStore
}

type DataStore {
  myNotes: Notes
}

type Notes implements CeramicStream & Node {
  _ceramic: CeramicMetadata!
  id: ID!
  all: [ID]
  favorites: [ID]
}

interface CeramicStream {
  _ceramic: CeramicMetadata!
}

type CeramicMetadata {
  streamID: ID!
  commitID: ID!
  streamMetadata: StreamMetadata!
  controllers: [DID!]!
  viewerIsController: Boolean!
  schema: CeramicMetadata
}

type StreamMetadata {
  controllers: [ID!]!
  schema: String
  family: String
  tags: [String]
}

type Note implements CeramicStream & Node {
  _ceramic: CeramicMetadata!
  id: ID!
  date: String!
  text: String!
  title: String!
}

type Mutation {
  createNote(input: CreateNoteInput!): CreateNotePayload
  updateNote(input: UpdateNoteInput!): UpdateNotePayload
  createNotes(input: CreateNotesInput!): CreateNotesPayload
  updateNotes(input: UpdateNotesInput!): UpdateNotesPayload
  setMyNotes(input: SetMyNotesInput!): SetMyNotesPayload
}

type CreateNotePayload {
  node: Note!
  clientMutationId: String
}

input CreateNoteInput {
  content: NoteInput!
  clientMutationId: String
}

input NoteInput {
  date: String!
  text: String!
  title: String!
}

type UpdateNotePayload {
  node: Note!
  clientMutationId: String
}

input UpdateNoteInput {
  id: ID!
  content: NoteInput!
  clientMutationId: String
}

type CreateNotesPayload {
  node: Notes!
  clientMutationId: String
}

input CreateNotesInput {
  content: NotesInput!
  clientMutationId: String
}

input NotesInput {
  all: [ID]
  favorites: [ID]
}

type UpdateNotesPayload {
  node: Notes!
  clientMutationId: String
}

input UpdateNotesInput {
  id: ID!
  content: NotesInput!
  clientMutationId: String
}

type SetMyNotesPayload {
  clientMutationId: String
}

input SetMyNotesInput {
  content: NotesInput!
  options: DataStoreMutationOptions
  clientMutationId: String
}

input DataStoreMutationOptions {
  merge: Boolean
}"
`;
