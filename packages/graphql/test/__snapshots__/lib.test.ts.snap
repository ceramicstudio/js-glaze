// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`lib add and read notes from a connection 1`] = `
Array [
  Object {
    "node": Object {
      "date": "2021-01-06T14:32:00.000Z",
      "text": "hello first",
      "title": "first",
    },
  },
  Object {
    "node": Object {
      "date": "2021-01-06T14:33:00.000Z",
      "text": "hello second",
      "title": "second",
    },
  },
]
`;

exports[`lib add and read notes from a connection 2`] = `
Object {
  "data": Object {
    "node": Object {
      "allConnection": Object {
        "edges": Array [
          Object {
            "node": Object {
              "date": "2021-01-06T14:34:00.000Z",
              "text": "hello third",
              "title": "third",
            },
          },
        ],
        "pageInfo": Object {
          "hasNextPage": false,
        },
      },
    },
  },
}
`;

exports[`lib add and read notes from a connection 3`] = `
Array [
  Object {
    "node": Object {
      "date": "2021-01-06T14:34:00.000Z",
      "text": "hello third",
      "title": "third",
    },
  },
  Object {
    "node": Object {
      "date": "2021-01-06T14:33:00.000Z",
      "text": "hello second",
      "title": "second",
    },
  },
]
`;

exports[`lib add and read notes from a connection 4`] = `
Object {
  "data": Object {
    "node": Object {
      "allConnection": Object {
        "edges": Array [
          Object {
            "node": Object {
              "date": "2021-01-06T14:32:00.000Z",
              "text": "hello first",
              "title": "first",
            },
          },
        ],
        "pageInfo": Object {
          "hasPreviousPage": false,
        },
      },
    },
  },
}
`;

exports[`lib add and read notes from a connection in the store 1`] = `
Object {
  "data": Object {
    "viewer": Object {
      "store": Object {
        "notePad": Object {
          "allConnection": Object {
            "edges": Array [
              Object {
                "node": Object {
                  "date": "2021-01-06T14:32:00.000Z",
                  "text": "hello first",
                  "title": "first",
                },
              },
              Object {
                "node": Object {
                  "date": "2021-01-06T14:33:00.000Z",
                  "text": "hello second",
                  "title": "second",
                },
              },
              Object {
                "node": Object {
                  "date": "2021-01-06T14:34:00.000Z",
                  "text": "hello third",
                  "title": "third",
                },
              },
            ],
          },
        },
      },
    },
  },
}
`;

exports[`lib create a note 1`] = `
Object {
  "data": Object {
    "createNote": Object {
      "node": Object {
        "date": "2021-01-06T14:28:00.000Z",
        "text": "hello test!",
        "title": "test",
      },
    },
  },
}
`;

exports[`lib read existing note 1`] = `
Object {
  "data": Object {
    "node": Object {
      "date": "2020-12-10T11:12:34.567Z",
      "text": "An example note",
      "title": "Example",
    },
  },
}
`;

exports[`lib schema creation 1`] = `
"type Query {
  \\"\\"\\"Fetches an object given its ID\\"\\"\\"
  node(
    \\"\\"\\"The ID of an object\\"\\"\\"
    id: ID!
  ): Node
  account(id: ID!): DID!
  viewer: DID
  exampleNote: Note!
}

\\"\\"\\"An object with an ID\\"\\"\\"
interface Node {
  \\"\\"\\"The id of the object.\\"\\"\\"
  id: ID!
}

type DID {
  id: ID!
  isViewer: Boolean!
  store: DataStore
}

type DataStore {
  notePad: Notes
}

type Notes implements CeramicStream & Node {
  _ceramic: CeramicMetadata!
  id: ID!
  allConnection(
    \\"\\"\\"Returns the items in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"Returns the first n items from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the items in the list that come before the specified cursor.\\"\\"\\"
    before: String

    \\"\\"\\"Returns the last n items from the list.\\"\\"\\"
    last: Int
  ): NoteConnection
  allNodeIDs: [ID]
  all: [String]
  favorites: [String]
}

interface CeramicStream {
  _ceramic: CeramicMetadata!
}

type CeramicMetadata {
  streamID: ID!
  commitID: ID!
  streamMetadata: StreamMetadata!
  controllers: [DID!]!
  viewerIsController: Boolean!
  schema: CeramicMetadata
}

type StreamMetadata {
  controllers: [ID!]!
  schema: String
  family: String
  tags: [String]
}

\\"\\"\\"A connection to a list of items.\\"\\"\\"
type NoteConnection {
  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: PageInfo!

  \\"\\"\\"A list of edges.\\"\\"\\"
  edges: [NoteEdge]
}

\\"\\"\\"Information about pagination in a connection.\\"\\"\\"
type PageInfo {
  \\"\\"\\"When paginating forwards, are there more items?\\"\\"\\"
  hasNextPage: Boolean!

  \\"\\"\\"When paginating backwards, are there more items?\\"\\"\\"
  hasPreviousPage: Boolean!

  \\"\\"\\"When paginating backwards, the cursor to continue.\\"\\"\\"
  startCursor: String

  \\"\\"\\"When paginating forwards, the cursor to continue.\\"\\"\\"
  endCursor: String
}

\\"\\"\\"An edge in a connection.\\"\\"\\"
type NoteEdge {
  \\"\\"\\"The item at the end of the edge\\"\\"\\"
  node: Note

  \\"\\"\\"A cursor for use in pagination\\"\\"\\"
  cursor: String!
}

type Note implements CeramicStream & Node {
  _ceramic: CeramicMetadata!
  id: ID!
  date: String!
  text: String!
  title: String!
}

type Mutation {
  createNote(input: CreateNoteInput!): CreateNotePayload
  updateNote(input: UpdateNoteInput!): UpdateNotePayload
  createNotes(input: CreateNotesInput!): CreateNotesPayload
  updateNotes(input: UpdateNotesInput!): UpdateNotesPayload
  addNotesAllEdge(input: AddNotesAllEdgeInput!): AddNotesAllEdgePayload
  addNotePadNotesAllEdge(input: AddNotePadNotesAllEdgeInput!): AddNotePadNotesAllEdgePayload
  setNotePad(input: SetNotePadInput!): SetNotePadPayload
}

type CreateNotePayload {
  node: Note!
  clientMutationId: String
}

input CreateNoteInput {
  content: NoteInput!
  clientMutationId: String
}

input NoteInput {
  date: String!
  text: String!
  title: String!
}

type UpdateNotePayload {
  node: Note!
  clientMutationId: String
}

input UpdateNoteInput {
  id: ID!
  content: NoteInput!
  clientMutationId: String
}

type CreateNotesPayload {
  node: Notes!
  clientMutationId: String
}

input CreateNotesInput {
  content: NotesInput!
  clientMutationId: String
}

input NotesInput {
  all: [ID]
  favorites: [String]
}

type UpdateNotesPayload {
  node: Notes!
  clientMutationId: String
}

input UpdateNotesInput {
  id: ID!
  content: NotesInput!
  clientMutationId: String
}

type AddNotesAllEdgePayload {
  node: Notes!
  edge: NoteEdge!
  clientMutationId: String
}

input AddNotesAllEdgeInput {
  id: ID!
  content: NoteInput!
  clientMutationId: String
}

type AddNotePadNotesAllEdgePayload {
  viewer: DID!
  edge: NoteEdge!
  clientMutationId: String
}

input AddNotePadNotesAllEdgeInput {
  content: NoteInput!
  clientMutationId: String
}

type SetNotePadPayload {
  viewer: DID!
  clientMutationId: String
}

input SetNotePadInput {
  content: NotesInput!
  options: DataStoreMutationOptions
  clientMutationId: String
}

input DataStoreMutationOptions {
  merge: Boolean
}"
`;
