// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`lib create a note 1`] = `
Object {
  "data": Object {
    "createNote": Object {
      "node": Object {
        "date": "2021-01-06T14:28:00.000Z",
        "text": "hello test!",
        "title": "test",
      },
    },
  },
}
`;

exports[`lib read existing note 1`] = `
Object {
  "data": Object {
    "node": Object {
      "date": "2020-12-10T11:12:34.567Z",
      "text": "An example note",
      "title": "Example",
    },
  },
}
`;

exports[`lib schema creation 1`] = `
"type Query {
  index(did: String): Index!

  \\"\\"\\"Fetches an object given its ID\\"\\"\\"
  node(
    \\"\\"\\"The ID of an object\\"\\"\\"
    id: ID!
  ): Node
  exampleNote: Note!
}

type Index {
  myNotes: Notes
}

type Notes implements Node {
  id: ID!
  all(
    \\"\\"\\"Returns the items in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"Returns the first n items from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the items in the list that come before the specified cursor.\\"\\"\\"
    before: String

    \\"\\"\\"Returns the last n items from the list.\\"\\"\\"
    last: Int
  ): NoteConnection
  favorites: [ID]
}

\\"\\"\\"An object with an ID\\"\\"\\"
interface Node {
  \\"\\"\\"The id of the object.\\"\\"\\"
  id: ID!
}

\\"\\"\\"A connection to a list of items.\\"\\"\\"
type NoteConnection {
  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: PageInfo!

  \\"\\"\\"A list of edges.\\"\\"\\"
  edges: [NoteEdge]
}

\\"\\"\\"Information about pagination in a connection.\\"\\"\\"
type PageInfo {
  \\"\\"\\"When paginating forwards, are there more items?\\"\\"\\"
  hasNextPage: Boolean!

  \\"\\"\\"When paginating backwards, are there more items?\\"\\"\\"
  hasPreviousPage: Boolean!

  \\"\\"\\"When paginating backwards, the cursor to continue.\\"\\"\\"
  startCursor: String

  \\"\\"\\"When paginating forwards, the cursor to continue.\\"\\"\\"
  endCursor: String
}

\\"\\"\\"An edge in a connection.\\"\\"\\"
type NoteEdge {
  \\"\\"\\"The item at the end of the edge\\"\\"\\"
  node: Note

  \\"\\"\\"A cursor for use in pagination\\"\\"\\"
  cursor: String!
}

type Note implements Node {
  id: ID!
  date: String!
  text: String!
  title: String!
}

type Mutation {
  createNote(input: CreateNoteInput!): CreateNotePayload
  updateNote(input: UpdateNoteInput!): UpdateNotePayload
  createNotes(input: CreateNotesInput!): CreateNotesPayload
  updateNotes(input: UpdateNotesInput!): UpdateNotesPayload
  setMyNotes(input: SetMyNotesInput!): SetMyNotesPayload
}

type CreateNotePayload {
  node: Note!
  clientMutationId: String
}

input CreateNoteInput {
  object: NoteInput!
  clientMutationId: String
}

input NoteInput {
  date: String!
  text: String!
  title: String!
}

type UpdateNotePayload {
  node: Note!
  clientMutationId: String
}

input UpdateNoteInput {
  id: ID!
  object: NoteInput!
  clientMutationId: String
}

type CreateNotesPayload {
  node: Notes!
  clientMutationId: String
}

input CreateNotesInput {
  object: NotesInput!
  clientMutationId: String
}

input NotesInput {
  all: ID
  favorites: [ID]
}

type UpdateNotesPayload {
  node: Notes!
  clientMutationId: String
}

input UpdateNotesInput {
  id: ID!
  object: NotesInput!
  clientMutationId: String
}

type SetMyNotesPayload {
  clientMutationId: String
}

input SetMyNotesInput {
  object: NotesInput!
  clientMutationId: String
}
"
`;
