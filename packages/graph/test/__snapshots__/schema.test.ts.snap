// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`schema printGraphQLSchema() 1`] = `
"type Query {
  \\"\\"\\"Fetches an object given its ID\\"\\"\\"
  node(
    \\"\\"\\"The ID of an object\\"\\"\\"
    id: ID!
  ): Node
  account(id: DID!): CeramicAccount!
  viewer: CeramicAccount
}

\\"\\"\\"An object with an ID\\"\\"\\"
interface Node {
  \\"\\"\\"The id of the object.\\"\\"\\"
  id: ID!
}

type CeramicAccount {
  id: DID!
  isViewer: Boolean!
  data: CeramicAccountData!
}

\\"\\"\\"
A field whose value conforms to the standard DID format as specified in did-core: https://www.w3.org/TR/did-core/.
\\"\\"\\"
scalar DID @specifiedBy(url: \\"https://www.w3.org/TR/did-core/\\")

type CeramicAccountData {
  genericProfile: GenericProfile
  socialProfile: SocialProfile
  personProfile: PersonProfile
}

type GenericProfile implements Node {
  id: ID!
  name: String
  image: ImageSources
}

type ImageSources {
  original: ImageMetadata!
  alternatives: [ImageMetadata]
}

type ImageMetadata {
  src: String!
  mimeType: String!
  width: Int!
  height: Int!
  size: Int
}

type SocialProfile implements Node {
  id: ID!
  description: String
  emoji: String
  background: ImageSources
  url: String
}

type PersonProfile implements Node {
  id: ID!
  birthDate: String
  gender: String
  homeLocation: String
  residenceCountry: String
  nationalities: [String]
  affiliations: [String]
}

type Mutation {
  createGenericProfile(input: CreateGenericProfileInput!): CreateGenericProfilePayload
  updateGenericProfile(input: UpdateGenericProfileInput!): UpdateGenericProfilePayload
  createSocialProfile(input: CreateSocialProfileInput!): CreateSocialProfilePayload
  updateSocialProfile(input: UpdateSocialProfileInput!): UpdateSocialProfilePayload
  createPersonProfile(input: CreatePersonProfileInput!): CreatePersonProfilePayload
  updatePersonProfile(input: UpdatePersonProfileInput!): UpdatePersonProfilePayload
}

type CreateGenericProfilePayload {
  node: GenericProfile!
  clientMutationId: String
}

input CreateGenericProfileInput {
  content: RequiredGenericProfileInput!
  clientMutationId: String
}

input RequiredGenericProfileInput {
  name: String
  image: RequiredImageSourcesInput
}

input RequiredImageSourcesInput {
  original: RequiredImageMetadataInput!
  alternatives: [RequiredImageMetadataInput]
}

input RequiredImageMetadataInput {
  src: String!
  mimeType: String!
  width: Int!
  height: Int!
  size: Int
}

type UpdateGenericProfilePayload {
  node: GenericProfile!
  clientMutationId: String
}

input UpdateGenericProfileInput {
  id: ID!
  content: GenericProfileInput!
  options: UpdateOptionsInput
  clientMutationId: String
}

input GenericProfileInput {
  name: String
  image: ImageSourcesInput
}

input ImageSourcesInput {
  original: ImageMetadataInput
  alternatives: [ImageMetadataInput]
}

input ImageMetadataInput {
  src: String
  mimeType: String
  width: Int
  height: Int
  size: Int
}

input UpdateOptionsInput {
  replace: Boolean
  version: CeramicCommitID
}

\\"\\"\\"A Ceramic Commit ID\\"\\"\\"
scalar CeramicCommitID

type CreateSocialProfilePayload {
  node: SocialProfile!
  clientMutationId: String
}

input CreateSocialProfileInput {
  content: RequiredSocialProfileInput!
  clientMutationId: String
}

input RequiredSocialProfileInput {
  description: String
  emoji: String
  background: RequiredImageSourcesInput
  url: String
}

type UpdateSocialProfilePayload {
  node: SocialProfile!
  clientMutationId: String
}

input UpdateSocialProfileInput {
  id: ID!
  content: SocialProfileInput!
  options: UpdateOptionsInput
  clientMutationId: String
}

input SocialProfileInput {
  description: String
  emoji: String
  background: ImageSourcesInput
  url: String
}

type CreatePersonProfilePayload {
  node: PersonProfile!
  clientMutationId: String
}

input CreatePersonProfileInput {
  content: RequiredPersonProfileInput!
  clientMutationId: String
}

input RequiredPersonProfileInput {
  birthDate: String
  gender: String
  homeLocation: String
  residenceCountry: String
  nationalities: [String]
  affiliations: [String]
}

type UpdatePersonProfilePayload {
  node: PersonProfile!
  clientMutationId: String
}

input UpdatePersonProfileInput {
  id: ID!
  content: PersonProfileInput!
  options: UpdateOptionsInput
  clientMutationId: String
}

input PersonProfileInput {
  birthDate: String
  gender: String
  homeLocation: String
  residenceCountry: String
  nationalities: [String]
  affiliations: [String]
}"
`;

exports[`schema printGraphQLSchema() 2`] = `
"type Query {
  \\"\\"\\"Fetches an object given its ID\\"\\"\\"
  node(
    \\"\\"\\"The ID of an object\\"\\"\\"
    id: ID!
  ): Node
  account(id: DID!): CeramicAccount!
  viewer: CeramicAccount
}

\\"\\"\\"An object with an ID\\"\\"\\"
interface Node {
  \\"\\"\\"The id of the object.\\"\\"\\"
  id: ID!
}

type CeramicAccount {
  id: DID!
  isViewer: Boolean!
  data: CeramicAccountData!
}

\\"\\"\\"
A field whose value conforms to the standard DID format as specified in did-core: https://www.w3.org/TR/did-core/.
\\"\\"\\"
scalar DID @specifiedBy(url: \\"https://www.w3.org/TR/did-core/\\")

type CeramicAccountData {
  noteCollection(
    \\"\\"\\"Returns the items in the list that come after the specified cursor.\\"\\"\\"
    after: String

    \\"\\"\\"Returns the first n items from the list.\\"\\"\\"
    first: Int

    \\"\\"\\"Returns the items in the list that come before the specified cursor.\\"\\"\\"
    before: String

    \\"\\"\\"Returns the last n items from the list.\\"\\"\\"
    last: Int
  ): NoteConnection
}

\\"\\"\\"A connection to a list of items.\\"\\"\\"
type NoteConnection {
  \\"\\"\\"Information to aid in pagination.\\"\\"\\"
  pageInfo: PageInfo!

  \\"\\"\\"A list of edges.\\"\\"\\"
  edges: [NoteEdge]
}

\\"\\"\\"Information about pagination in a connection.\\"\\"\\"
type PageInfo {
  \\"\\"\\"When paginating forwards, are there more items?\\"\\"\\"
  hasNextPage: Boolean!

  \\"\\"\\"When paginating backwards, are there more items?\\"\\"\\"
  hasPreviousPage: Boolean!

  \\"\\"\\"When paginating backwards, the cursor to continue.\\"\\"\\"
  startCursor: String

  \\"\\"\\"When paginating forwards, the cursor to continue.\\"\\"\\"
  endCursor: String
}

\\"\\"\\"An edge in a connection.\\"\\"\\"
type NoteEdge {
  \\"\\"\\"The item at the end of the edge\\"\\"\\"
  node: Note

  \\"\\"\\"A cursor for use in pagination\\"\\"\\"
  cursor: String!
}

type Note implements Node {
  id: ID!
  title: String!
  text: String!
  author: CeramicAccount!
  version: CeramicCommitID!
}

\\"\\"\\"A Ceramic Commit ID\\"\\"\\"
scalar CeramicCommitID

type Mutation {
  createNote(input: CreateNoteInput!): CreateNotePayload
  updateNote(input: UpdateNoteInput!): UpdateNotePayload
}

type CreateNotePayload {
  node: Note!
  clientMutationId: String
}

input CreateNoteInput {
  content: RequiredNoteInput!
  clientMutationId: String
}

input RequiredNoteInput {
  title: String!
  text: String!
}

type UpdateNotePayload {
  node: Note!
  clientMutationId: String
}

input UpdateNoteInput {
  id: ID!
  content: NoteInput!
  options: UpdateOptionsInput
  clientMutationId: String
}

input NoteInput {
  title: String
  text: String
}

input UpdateOptionsInput {
  replace: Boolean
  version: CeramicCommitID
}"
`;
